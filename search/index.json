[{"content":"什么是 Git？ Git 是一个分布式版本控制系统，用于跟踪文件的修改历史，方便多人协作开发和管理项目。\n与传统的集中式版本控制系统不同，Git的每个工作目录都是一个完整的代码仓库，具有完整的历史记录和版本跟踪能力。\n为什么要使用 Git？ 版本控制： 可以回溯到任意历史版本\n团队协作： 多人可以同时工作在同一个项目上\n分支管理： 轻松创建、合并分支，实现不同功能并行开发\n备份保障： 每个开发者都有完整的项目历史\nGit 基本概念 四个区域 工作区： 用户直接编辑文件的目录，即本地项目文件夹（可见的代码文件）。\n暂存区： 临时存放工作区改动的中间区域，是提交前的缓冲地带。\n本地仓库： 存储项目完整历史记录的数据库（位于 .git 目录中）。\n远程仓库： 托管在服务器上的仓库（如 GitHub、GitLab）。\n文件状态： 已修改： 修改了但是没有保存到暂存区的文件。\n已暂存： 修改后已经保存到暂存区的文件。\n已提交： 把暂存区的文件提交到本地仓库后的状态。\ngit config \u0026ndash;global credential.helper store 与 SSH 秘钥 credential.helper store 用于 HTTPS 协议的 Git 操作\n将你的 HTTPS 凭据（用户名和密码）以明文形式存储在 ~/.git-credentials 文件中\n下次访问 HTTPS 仓库时自动使用这些凭据\n安全性较低，因为密码是明文存储的\nSSH 密钥 用于 SSH 协议的 Git 操作\n使用非对称加密技术（公钥/私钥对）\n公钥上传到 Git 服务器（如 GitHub），私钥保留在本地\n每次连接时通过加密握手验证身份\n比 HTTPS 更安全，推荐用于专业开发环境\n主要区别： 协议不同：一个用于 HTTPS，一个用于 SSH\n安全级别：SSH 更安全，credential.helper store 是明文存储\n使用场景：SSH 需要密钥对设置，适合开发者；credential.helper 适合简单场景\n存储内容：SSH 存储加密密钥，credential.helper 存储明文密码\nGit 的使用 初始化设置 配置用户名： git config \u0026ndash;global user.name \u0026ldquo;Name\u0026rdquo;\n配置邮箱： git config \u0026ndash;global user.email \u0026ldquo;mail\u0026rdquo;\n存储配置： git config \u0026ndash;global credential.helper store\n仓库初始化与克隆 创建目录并进入： mkdir learn-git\ncd learn-git\n初始化本地仓库： git init\n克隆远程仓库： git clone \u0026lt;仓库地址\u0026gt;\n文件操作 创建文件并写入内容： echo \u0026ldquo;内容\u0026rdquo; \u0026gt; 文件名.txt\n查看文件内容： cat 文件名.txt\n列出目录文件（含隐藏文件）： ls -al\n删除本地文件： rm 文件名\n暂存与提交 添加文件到暂存区： git add 文件名（单个文件）\ngit add *.txt（所有 .txt 文件）\ngit add .（当前目录所有文件）\n查看暂存区文件： git ls-files\n提交更改： git commit -m \u0026ldquo;提交说明\u0026rdquo;\n从暂存区移除文件（保留工作区文件） git rm \u0026ndash;cached 文件名\n彻底删除文件（工作区 + 暂存区）： git rm 文件名\ngit rm -r *（递归删除所有文件及子目录）\nSSH配置 生成SSH秘钥 ssh-keygen -t rsa -b 4096\n状态与日志 查看仓库状态 git status\n查看提交记录 git log（完整记录）\ngit log \u0026ndash;oneline（简洁记录）\n版本回退与比较 回退版本 git reset \u0026ndash;soft（保留工作区和暂存区修改）\ngit reset \u0026ndash;mixed（保留工作区修改，默认方式）\ngit reset \u0026ndash;hard（彻底回退，丢弃所有修改）\n比较文件差异 工作区、暂存区 git diff\n工作区、最新提交 git diff HEAD\n暂存区、最新提交 git diff \u0026ndash;cached\n比较两个版本 git diff 版本号1 版本号2\n当前版本、上一版本 git diff HEAD~ HEAD\n当前版本、前第 N 个版本 git diff HEAD~N HEAD\n","date":"2025-08-11T22:00:00+08:00","image":"https://dev.soarfine.com/p/git/1_hu_8b78950e3f5a3dc5.png","permalink":"https://dev.soarfine.com/p/git/","title":"Git 学习笔记"},{"content":"搭建思路 什么是 GitHub Pages？ GitHub Pages 是 GitHub 提供的一项静态网站托管服务，允许用户直接从 GitHub 仓库中托管和发布静态网页（如 HTML、CSS、JavaScript 等文件），且完全免费，非常适合用于搭建个人博客、项目文档、作品集等。\n什么是 Hugo？ Hugo 是一个快速、现代的静态网站生成器，用 Go 语言开发，专注于性能和易用性。它能将 Markdown、HTML 等源文件转换为可直接部署的静态 HTML 网站，非常适合构建博客、文档、个人主页、项目网站等。\n什么是 GitHub Action？ GitHub Actions 是 GitHub 提供的持续 CI/CD（持续集成 / 持续部署）工具，它允许你在 GitHub 仓库中自动化各种软件开发流程，比如代码测试、构建、部署、Issue 处理等。简单来说，你可以通过编写配置文件，让 GitHub 在特定事件（如代码推送、PR 提交等）发生时自动执行一系列预定操作。\nhugo-theme-stack-starter：Hugo+Stack 主题博客快速部署项目 基于 Hugo 的静态网站生成功能，开发者创建了众多风格各异的主题模板。其中，Stack 主题因其精美的页面设计和丰富的功能特性而备受关注。\n为了进一步简化开发流程，Stack 作者 Jimmy 开源了一个集成 Hugo+ Stack 主题快速部署博客的项目 hugo-theme-stack-starter。此外，该模板还集成了 GitHub Action，能够在本地完成内容编辑后，自动触发 GitHub Action，完成静态网站构建、部署流程，确保发布过程的自动化与高效性。\n我们只需要 fork hugo-theme-stack-starter 项目，完成基础配置后即可完成博客搭建。\n博客工作流程 搭建步骤 Fork hugo-theme-stack-starter 代码仓库 Fork 到个人账户下的代码仓库如果没有域名的话可以使用 GitHub 提供的域名，不过需要 Fork 后的仓库名位 ${github_username}.github.io，后续可以直接通过 ${github_username}.github.io 域名来直接访问个人博客。\n这里我准备使用个人域名，所以仓库名可以任意定义。\n触发博客部署的 GitHub Action 工作流 我们使用的这个快速博客部署项目在我们代码提交到你GitHub 仓库后会自动,触发 GitHub 工作流，Master 分支中的文件会被编译为静态网页，然后发布到 gh-pages 分支上。\n首次 Frok 之后的代码仓可能并没有触发 GitHub Action ，我们可以通过手动触发来完成首次的静态网页编译与发布。\n直接修改 Master 分支下 .github/workflows 目录下的 deploy.yml 文件，在原有的代码更新触发 GitHub Action 之外，增加一种手动触发工作流的方式。\n后续我们就可以通过 Actions 模块来手动完成工作流的触发。\n域名解析指向 GitHub 完成 GitHub Pages 的配置及域名绑定 点击 Seetings，进入 Secrets and variable 一栏，选择 Pages 栏目，选择部署分支为 gh-pages，即可指向 GitHub Pages 到我们的静态页面分支。\n接下来在 Custom domain 中完成已解析域名的绑定。\n如下图所示，完成域名绑定后，目标分支下会生成个 CNAME 文件，如果我们点开看的话，文件内容只有一行，内容为我们刚才绑定的域名。\n直接通过域名即可成功访问博客 后续完成个性化配置就可以正常通过博客发布文章了，如下图所示 Stack 主题给我们提供了一些 Demo 文章案例，我们可以在编辑文章时进行参考。当然也可以直接参考 Hugo 官网文档说明来完成一些配置。\n","date":"2025-08-10T11:00:00+08:00","image":"https://dev.soarfine.com/p/hugo-github-pages/1754729486659-27925415-4161-47ae-9511-97bfed804844_hu_3869dfa5ee5c8243.png","permalink":"https://dev.soarfine.com/p/hugo-github-pages/","title":"基于Hugo+Github Page快速搭建个人博客"}]